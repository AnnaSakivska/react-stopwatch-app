{"version":3,"sources":["reportWebVitals.ts","Components/calculateTimer.tsx","Components/Controls/Controls.tsx","Components/Main/Main.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","calculateTimer","givenTimeInSeconds","hours","Math","floor","mins","secs","Controls","timeOn","setTimeOn","timeInSeconds","setTimeInSeconds","className","onClick","Main","useState","timerArray","setTimerArray","useEffect","subscription$","Subject","timer","pipe","takeUntil","subscribe","val","next","unsubscribe","timeArray","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,sCCGCQ,MAZf,SAAwBC,GACtB,IAAIC,EAAgBC,KAAKC,MAAMH,EAAqB,MAChDI,EAAeF,KAAKC,OAAOH,EAA8B,KAARC,GAAiB,IAClEI,EAAeL,EAA8B,KAARC,EAAwB,GAAPG,EAE1D,MAAO,CACLH,EAAQ,GAAR,WAAiBA,GAAUA,EAC3BG,EAAO,GAAP,WAAgBA,GAASA,EACzBC,EAAO,GAAP,WAAgBA,GAASA,I,eCYdC,MAhBf,YAAgF,IAA5DC,EAA2D,EAA3DA,OAAQC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,iBAMpD,OACE,0BAASC,UAAU,iBAAnB,WACKJ,IAAWE,GAAkB,wBAAQE,UAAU,uBAAuBC,QAAS,kBAAMJ,GAAU,IAAlE,mBAC/BD,GAAU,wBAAQI,UAAU,uBAAuBC,QAAS,kBAAMJ,GAAU,IAAlE,mBACRD,GAAUE,EAAgB,GAAM,wBAAQE,UAAU,uBAAuBC,QAAS,kBAAMJ,GAAU,IAAlE,kBAClCC,EAAgB,GAAK,wBAAQE,UAAU,uBAAuBC,QAV9C,WACnBF,EAAiB,GACjBF,GAAU,IAQc,uBCiCbK,MAxCf,WAAiB,IAAD,EAC4BC,mBAAiB,GAD7C,mBACPL,EADO,KACQC,EADR,OAEsBI,mBAA+B,IAFrD,mBAEPC,EAFO,KAEKC,EAFL,OAGcF,oBAAsB,GAHpC,mBAGPP,EAHO,KAGCC,EAHD,KA0Bd,OArBAS,qBAAU,WACN,IAAMC,EAAgB,IAAIC,IAQ1B,OAPAC,YAAM,EAAG,KACJC,KAAKC,YAAUJ,IACfK,WAAU,WACHhB,GACFG,GAAiB,SAAAc,GAAG,OAAIA,EAAM,QAGjC,WACHN,EAAcO,OACdP,EAAcQ,iBAGnB,CAACnB,IAEJU,qBAAU,WACR,IAAIU,EAAkC5B,EAAeU,GACrDO,EAAcW,KACb,CAAClB,IAGF,qBAAKE,UAAU,YAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,+BACE,sBAAMA,UAAU,OAAhB,SAAwBI,EAAW,KADrC,IAEE,sBAAMJ,UAAU,OAAhB,SAAwBI,EAAW,KAFrC,IAGE,sBAAMJ,UAAU,OAAhB,SAAwBI,EAAW,QAErC,cAAC,EAAD,CAAUR,OAAQA,EAAQC,UAAWA,EAAWC,cAAeA,EAAeC,iBAAkBA,UCpCxGkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B1C,M","file":"static/js/main.f8460b02.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","function calculateTimer(givenTimeInSeconds: number): Array<string|number> {\r\n  let hours: number = Math.floor(givenTimeInSeconds / 3600);\r\n  let mins: number = Math.floor((givenTimeInSeconds - (hours * 3600)) / 60);\r\n  let secs: number = givenTimeInSeconds - (hours * 3600) - (mins * 60);\r\n\r\n  return [\r\n    hours < 10 ? `0${hours}` : hours,\r\n    mins < 10 ? `0${mins}` : mins,\r\n    secs < 10 ? `0${secs}` : secs\r\n  ];\r\n}\r\n\r\nexport default calculateTimer;","import React from 'react';\r\n\r\nimport './Controls.css';\r\n\r\nfunction Controls({ timeOn, setTimeOn, timeInSeconds, setTimeInSeconds }: any) {\r\n  const resetHandler = () => {\r\n    setTimeInSeconds(0);\r\n    setTimeOn(false);\r\n  };\r\n\r\n  return (\r\n    <section className=\"stopwatch-btns\">\r\n      {(!timeOn && !timeInSeconds) && <button className=\"large ui teal button\" onClick={() => setTimeOn(true)}>Start</button>}\r\n      {timeOn && <button className=\"large ui teal button\" onClick={() => setTimeOn(false)}>Stop</button>}\r\n      {(!timeOn && timeInSeconds > 0) && <button className=\"large ui teal button\" onClick={() => setTimeOn(true)}>Wait</button>}\r\n      {timeInSeconds > 0 && <button className=\"large ui teal button\" onClick={resetHandler}>Reset</button>}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Controls;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Subject, timer } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport './Main.css';\r\nimport calculateTimer from '../calculateTimer';\r\nimport Controls from '../Controls/Controls';\r\n\r\nfunction Main() {\r\n  const [timeInSeconds, setTimeInSeconds] = useState<number>(0);\r\n  const [timerArray, setTimerArray] = useState<Array<number|string>>([]);\r\n  const [timeOn, setTimeOn] = useState<boolean|any>(false);\r\n\r\n  useEffect(() => {\r\n      const subscription$ = new Subject();\r\n      timer(0, 1000)\r\n          .pipe(takeUntil(subscription$))\r\n          .subscribe(() => {\r\n              if (timeOn) {\r\n                setTimeInSeconds(val => val + 1);\r\n              }\r\n          });\r\n      return () => {\r\n          subscription$.next();\r\n          subscription$.unsubscribe();\r\n      };\r\n\r\n  }, [timeOn]);\r\n\r\n  useEffect(() => {\r\n    let timeArray: Array<number|string> = calculateTimer(timeInSeconds);\r\n    setTimerArray(timeArray);\r\n  }, [timeInSeconds]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"stopwatch-wrapper\">\r\n        <h1>\r\n          <span className=\"time\">{timerArray[0]}</span>:\r\n          <span className=\"time\">{timerArray[1]}</span>:\r\n          <span className=\"time\">{timerArray[2]}</span>\r\n        </h1>\r\n        <Controls timeOn={timeOn} setTimeOn={setTimeOn} timeInSeconds={timeInSeconds} setTimeInSeconds={setTimeInSeconds} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Main from './Components/Main/Main';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}